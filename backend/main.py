from flask import Flask, request, jsonify, send_file
from flasgger import Swagger
from flask_cors import CORS
import os
import time
import yadisk
from multiprocessing import Pool, cpu_count
from pathlib import Path
import asyncio
import logging
from datetime import datetime
import tempfile
import zipfile
from io import BytesIO

app = Flask("Diploma")
CORS(app)
from flasgger import Swagger
swagger = Swagger(app)

y = yadisk.YaDisk(token=os.getenv("YANDEX_TOKEN"))

SITY = ["Moscow",  "Novosibirsk"]


os.makedirs("logs", exist_ok=True)
log_filename = datetime.now().strftime("logs/app_%Y-%m-%d.log")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(log_filename, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logging.getLogger("yadisk").setLevel(logging.WARNING)

def makedirs(sity):
    pdf_folder = f"{sity}_pdf"
    xlsx_folder = f"{sity}_xlsx"
    if not y.exists(pdf_folder):
        y.mkdir(pdf_folder)
        time.sleep(0.5)
    if not y.exists(xlsx_folder):
        y.mkdir(xlsx_folder)
    os.makedirs(xlsx_folder, exist_ok=True)
    time.sleep(1)
    return xlsx_folder

def check_duplicates(sity, name):
    pdf_folder = f"{sity}_pdf/{name}"
    Path(pdf_folder).mkdir(parents=True, exist_ok=True)
    if not y.exists(pdf_folder):
        y.mkdir(pdf_folder)
    else:
        logging.info(f"–î—É–±–ª–∏–∫–∞—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –¥–∏—Å–∫–µ: {pdf_folder}")
        y.remove(pdf_folder, permanently=True)
        time.sleep(1)
        y.mkdir(pdf_folder)
        xlsx_file = f"{sity}_xlsx/{name}.xlsx"
        if y.exists(xlsx_file):
            logging.info(f"–î—É–±–ª–∏–∫–∞—Ç Excel-—Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ: {xlsx_file}")
            y.remove(xlsx_file, permanently=True)
        xlsx_downloader_file = f"{sity}_xlsx/downloaded/{name}.xlsx"
        if y.exists(xlsx_downloader_file):
            logging.info(f"–î—É–±–ª–∏–∫–∞—Ç Excel-—Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ –≤ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö: {xlsx_downloader_file}")
            y.remove(xlsx_downloader_file, permanently=True)
        return pdf_folder, True

    return pdf_folder, False

def run_async_process_pdf(sity, name, pdf_folder, xlsx_folder):
    import pdf_processor as pdf
    try:
        asyncio.run(pdf.process_pdf(sity, name, pdf_folder, xlsx_folder))
        return { "name": name, "status": "success" }
    except Exception as e:
        return { "name": name, "status": "error", "error": str(e) }

def process_city(sity: str) -> tuple[str, list[str], list[str], list[str]]:
    if sity not in SITY:
        return f"–ì–æ—Ä–æ–¥ –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞: {SITY}", [],[]

    folder_path = f"/{sity}"
    if not y.exists(folder_path):
        return f"–ü–∞–ø–∫–∞ '{folder_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ.", [], []

    done_folder = f"{folder_path}/done"
    if not y.exists(done_folder):
        y.mkdir(done_folder)

    xlsx_folder = makedirs(sity)
    tasks = []
    duplicates = []
    processed = []
    failed_tasks = []

    for item in y.listdir(folder_path):
        if item["type"] == "file" and item["name"].lower().endswith(".pdf"):
            filename = item["name"]
            name = os.path.splitext(filename)[0]
            logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: /{sity}/{name}.pdf")
            pdf_folder, duplicate = check_duplicates(sity, name)
            if duplicate:
                duplicates.append(name)
            tasks.append((sity, name, pdf_folder, xlsx_folder))

    if not tasks:
        return "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.", [], []

    results = []
    with Pool(cpu_count()) as pool:
        results = pool.starmap(run_async_process_pdf, tasks)

    for res in results:
        if res["status"] == "success":
            processed.append(res["name"])
        else:
            err = { "name": res["name"], "error": res["error"] }
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–µ pdf: ",str(err))
            failed_tasks.append(err)

    return "–§–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã", processed, duplicates, failed_tasks

@app.route("/process-pdf", methods=["POST"])
def trigger_processing():
    """
    –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF-—Ñ–∞–π–ª–æ–≤
    ---
    parameters:
      - name: sity
        in: body
        required: true
        schema:
          type: object
          properties:
            sity:
              type: string
    responses:
      200:
        description: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF-—Ñ–∞–π–ª–æ–≤
    """
    data = request.get_json()
    sity = data.get("sity")
    logging.info(f"‚û°Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ—Ä–æ–¥–∞: {sity}")
    try:
        start = time.time()
        status, processed, duplicates, failed = process_city(sity)
        duration = time.time() - start
        logging.info("–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞")
        return jsonify({
            "status": status,
            "processed": processed,
            "duplicates": duplicates,
            "failed": failed,
            "duration_sec": round(duration, 2)
        })
    except Exception as e:
        logging.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, error: {str(e)}")
        return jsonify({"status": "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", "error": str(e)}), 500

@app.route("/xlsx-list", methods=["GET"])
def list_xlsx_files():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Excel-—Ñ–∞–π–ª–æ–≤ –ø–æ –≥–æ—Ä–æ–¥—É
    ---
    tags:
      - Excel
    parameters:
      - name: sity
        in: query
        type: string
        required: true
        description: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Moscow)
    responses:
      200:
        description: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö .xlsx —Ñ–∞–π–ª–æ–≤
        schema:
          type: object
          properties:
            files:
              type: array
              items:
                type: string
              example: ["00001.xlsx", "00002.xlsx"]
      400:
        description: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥
      500:
        description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    """
    sity = request.args.get("sity")

    if not sity or sity not in SITY:
        logging.warning("–ó–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –≥–æ—Ä–æ–¥–æ–º: %s", sity)
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥"}), 400

    folder_path = f"/{sity}_xlsx"
    logging.info(f"üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ xlsx —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {folder_path}")

    try:
        if not y.exists(folder_path):
            logging.info(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder_path}")
            return jsonify({"files": []})

        files = y.listdir(folder_path)

        xlsx_files = sorted(
            [f for f in files if f["type"] == "file" and f["name"].endswith(".xlsx")],
            key=lambda f: f["created"],
            reverse=True
        )

        file_names = [f["name"] for f in xlsx_files]
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(file_names)} —Ñ–∞–π–ª–æ–≤: {file_names}")
        return jsonify({"files": file_names})

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/download-xlsx", methods=["POST"])
def download_xlsx_files():
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ZIP —Å Excel-—Ñ–∞–π–ª–∞–º–∏
    ---
    parameters:
      - name: sity
        in: body
        required: true
        schema:
          type: object
          properties:
            sity:
              type: string
            files:
              type: array
              items:
                type: string
    responses:
      200:
        description: ZIP-—Ñ–∞–π–ª —Å Excel-–¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    """
    data = request.get_json()
    sity = data.get("sity")
    files = data.get("files", [])
    logging.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω—ã excel –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {files}")

    if not sity or not isinstance(files, list) or not files:
        return jsonify({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞"}), 400

    remote_folder = f"/{sity}_xlsx"
    zip_buffer = BytesIO()

    with tempfile.TemporaryDirectory() as tmpdir:
        with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zipf:
            for filename in files:
                remote_path = f"{remote_folder}/{filename}"
                local_path = os.path.join(tmpdir, filename)

                try:
                    y.download(remote_path, local_path)
                    downloaded_folder = f"{remote_folder}/downloaded"
                    if not y.exists(downloaded_folder):
                        y.mkdir(downloaded_folder)
                    downloaded_filename = f"{downloaded_folder}/{filename}"
                    if y.exists(downloaded_filename):
                        y.remove(downloaded_filename, permanently=True)
                    y.move(remote_path, downloaded_filename)
                    zipf.write(local_path, arcname=filename)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {filename}: {e}")

    zip_buffer.seek(0)
    return send_file(
        zip_buffer,
        mimetype="application/zip",
        as_attachment=True,
        download_name=f"{sity}_xlsx_selected.zip"
    )

@app.route("/upload-pdf", methods=["POST"])
def upload_pdf_files():
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ PDF-—Ñ–∞–π–ª–æ–≤
    ---
    consumes:
      - multipart/form-data
    parameters:
      - name: sity
        in: formData
        type: string
        required: true
        description: –ì–æ—Ä–æ–¥
      - name: files
        in: formData
        type: file
        required: true
        description: –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª–æ–≤
    responses:
      200:
        description: –°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    sity = request.form.get("sity")
    files = request.files.getlist("files")

    if not sity or sity not in SITY:
        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥: {sity}")
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥"}), 400

    if not files:
        logging.error("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ")
        return jsonify({"error": "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"}), 400

    folder_path = f"/{sity}"
    if not y.exists(folder_path):
        y.mkdir(folder_path)

    success, failed = [], []

    for file in files:
        filename = file.filename
        if not filename.lower().endswith(".pdf"):
            failed.append(filename)
            continue

        logging.info(f"–ù–∞—á–∞—Ç–∞ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {filename}")
        try:
            temp_path = os.path.join(tempfile.gettempdir(), filename)
            file.save(temp_path)
            remote_filepath = f"{folder_path}/{filename}"
            if y.exists(remote_filepath):
                logging.info(f"–î—É–±–ª–∏–∫–∞—Ç —Ñ–∞–π–ª–∞: {filename}")
                y.remove(remote_filepath, permanently=True)
            y.upload(temp_path, remote_filepath)
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename}")
            success.append(filename)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {e}")
            failed.append(filename)

    return jsonify({
        "uploaded": success,
        "failed": failed,
        "status": f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(success)}, –û—à–∏–±–∫–∏: {len(failed)}"
    })

@app.route("/upload-excel", methods=["POST"])
def upload_pdf_files():
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ Excel-—Ñ–∞–π–ª–æ–≤
    ---
    consumes:
      - multipart/form-data
    parameters:
      - name: sity
        in: formData
        type: string
        required: true
        description: –ì–æ—Ä–æ–¥
      - name: files
        in: formData
        type: file
        required: true
        description: –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ Excel-—Ñ–∞–π–ª–æ–≤
    responses:
      200:
        description: –°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    sity = request.form.get("sity")
    files = request.files.getlist("files")

    if not sity or sity not in SITY:
        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥: {sity}")
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥"}), 400

    if not files:
        logging.error("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ")
        return jsonify({"error": "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"}), 400

    folder_path = f"/{sity}_xlsx/verified"
    if not y.exists(folder_path):
        y.mkdir(folder_path)

    success, failed = [], []

    for file in files:
        filename = file.filename
        if not filename.lower().endswith(".xlsx"):
            failed.append(filename)
            continue

        logging.info(f"–ù–∞—á–∞—Ç–∞ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {filename}")
        try:
            temp_path = os.path.join(tempfile.gettempdir(), filename)
            file.save(temp_path)
            remote_filepath = f"{folder_path}/{filename}"
            if y.exists(remote_filepath):
                logging.info(f"–î—É–±–ª–∏–∫–∞—Ç —Ñ–∞–π–ª–∞: {filename}")
                y.remove(remote_filepath, permanently=True)
            y.upload(temp_path, remote_filepath)
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename}")
            success.append(filename)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {e}")
            failed.append(filename)

    return jsonify({
        "uploaded": success,
        "failed": failed,
        "status": f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(success)}, –û—à–∏–±–∫–∏: {len(failed)}"
    })

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
