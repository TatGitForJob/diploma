import { useState, useEffect } from "react";
import axios from "axios";
import "./index.css";

const validCities = {
  Moscow: "mos123",
  Novosibirsk: "nov456",
};

export default function CityApp() {
  const [step, setStep] = useState(1);
  const [city, setCity] = useState("");
  const [password, setPassword] = useState("");
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(false);
  const [xlsxFiles, setXlsxFiles] = useState([]);
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [processedFiles, setProcessedFiles] = useState([]);
  const [duplicateFiles, setDuplicateFiles] = useState([]);

  useEffect(() => {
    const storedCity = localStorage.getItem("authCity");
    if (storedCity && validCities[storedCity]) {
      setCity(storedCity);
      setStep(2);
    }
  }, []);

  const handleLogin = () => {
    if (validCities[city] && validCities[city] === password) {
      localStorage.setItem("authCity", city);
      setStep(2);
      setMessage("");
    } else {
      setMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
    }
  };

  const handleLogout = () => {
    localStorage.removeItem("authCity");
    setCity("");
    setPassword("");
    setStep(1);
    setMessage("");
    setXlsxFiles([]);
    setSelectedFiles([]);
    setProcessedFiles([]);
    setDuplicateFiles([]);
  };

  const handleProcess = async () => {
    setLoading(true);
    setMessage("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...");
    try {
      const res = await axios.post("http://localhost:8000/process", { sity: city });
      const data = res.data || {};
      if (typeof data === "object") {
        setMessage(data.status || "‚úÖ –ì–æ—Ç–æ–≤–æ");
        setProcessedFiles(Array.isArray(data.processed) ? data.processed : []);
        setDuplicateFiles(Array.isArray(data.duplicates) ? data.duplicates : []);
      } else {
        setMessage("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
      }
    } catch (err) {
      console.error(err);
      setMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏");
    }
    setLoading(false);
  };

  const handleFetchXlsxFiles = async () => {
    try {
      const res = await axios.get("http://localhost:8000/xlsx-list", {
        params: { sity: city },
      });
      setXlsxFiles(res.data.files || []);
      setMessage(`üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${res.data.files.length}`);
    } catch (err) {
      setMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤");
    }
  };

  const handleFileToggle = (filename) => {
    setSelectedFiles((prev) =>
      prev.includes(filename) ? prev.filter((f) => f !== filename) : [...prev, filename]
    );
  };

  const handleDownloadSelected = async () => {
    if (selectedFiles.length === 0) {
      setMessage("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã");
      return;
    }
    try {
      setMessage("üì¶ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...");
      const response = await axios.post(
        "http://localhost:8000/download-xlsx",
        {
          sity: city,
          files: selectedFiles,
        },
        { responseType: "blob" }
      );

      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement("a");
      link.href = url;
      link.setAttribute("download", `${city}_selected_files.zip`);
      document.body.appendChild(link);
      link.click();
      link.remove();

      setMessage("‚úÖ –ê—Ä—Ö–∏–≤ –ø–æ–ª—É—á–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω");
    } catch (err) {
      setMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤");
    }
  };

  return (
    <div className="page">
      {step === 1 && (
        <div className="card">
          <h1 className="title">–í—Ö–æ–¥ –ø–æ –≥–æ—Ä–æ–¥—É</h1>

          <label>–ì–æ—Ä–æ–¥</label>
          <input
            type="text"
            placeholder="–ì–æ—Ä–æ–¥ (Moscow, Novosibirsk)"
            value={city}
            onChange={(e) => setCity(e.target.value)}
          />

          <label>–ü–∞—Ä–æ–ª—å</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />

          <button onClick={handleLogin} className="btn main-btn">
            –í–æ–π—Ç–∏
          </button>

          {message && <p className="error-message">{message}</p>}
        </div>
      )}

      {step === 2 && (
        <div className="dashboard">
          <h2 className="subtitle">üèôÔ∏è –ì–æ—Ä–æ–¥: {city}</h2>

          <div className="button-group">
            <button onClick={handleProcess} disabled={loading} className="btn">
              {loading ? "–û–±—Ä–∞–±–æ—Ç–∫–∞..." : "–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"}
            </button>
            <button onClick={handleFetchXlsxFiles} className="btn">
              –°–ø–∏—Å–æ–∫ Excel-—Ñ–∞–π–ª–æ–≤
            </button>
            <button onClick={handleDownloadSelected} className="btn">
              –°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
            </button>
            <button onClick={handleLogout} className="btn danger">
              –í—ã–π—Ç–∏
            </button>
          </div>

          {message && <p className="info-message">{message}</p>}

          <div className="file-columns">
            {processedFiles.length > 0 && (
              <FileList title="–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ" files={processedFiles} className="green-title" />
            )}
            {duplicateFiles.length > 0 && (
              <FileList title="–î—É–±–ª–∏–∫–∞—Ç—ã" files={duplicateFiles} className="brown-title" />
            )}
            {xlsxFiles.length > 0 && (
              <div>
                <h3 className="blue-title">–§–∞–π–ª—ã Excel</h3>
                <ul className="file-list">
                  {xlsxFiles.map((file, i) => (
                    <li
                      key={i}
                      onClick={() => handleFileToggle(file)}
                      className={`file-item ${selectedFiles.includes(file) ? "selected" : ""}`}
                    >
                      {file}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}

function FileList({ title, files, className }) {
  return (
    <div>
      <h3 className={className}>{title}</h3>
      <ul className="file-list">
        {files.map((file, i) => (
          <li key={i} className="file-item">{file}</li>
        ))}
      </ul>
    </div>
  );
}
